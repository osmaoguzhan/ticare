generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Status {
  PENDING
  COMPLETED
}

model User {
  id          String                @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  surname     String
  email       String                @unique
  password    String
  role        Role                  @default(USER)
  phoneNumber String?
  settings    Json                  @default("{\"language\": \"en\", \"currency\": \"USD\"}")
  isActivated Boolean               @default(false)
  resetTokens ResetPasswordTokens[]
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  company     Company?
}

model Company {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  addressLine1 String
  addressLine2 String
  phoneNumber  String     @unique
  email        String     @unique
  website      String?
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @unique @db.ObjectId
  customers    Customer[]
  suppliers    Supplier[]
  products     Product[]
  sales        Sale[]
  purchases    Purchase[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Customer {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  surname      String
  email        String   @unique
  phoneNumber  String   @unique
  addressLine1 String
  addressLine2 String
  company      Company  @relation(fields: [companyId], references: [id])
  companyId    String   @db.ObjectId
  sales        Sale[]
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Supplier {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  surname      String
  email        String     @unique
  phoneNumber  String     @unique
  addressLine1 String
  addressLine2 String
  company      Company    @relation(fields: [companyId], references: [id])
  companyId    String     @db.ObjectId
  purchases    Purchase[]
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Product {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?
  productType     String
  purchasePrice   Float
  salePrice       Float
  company         Company           @relation(fields: [companyId], references: [id])
  companyId       String            @db.ObjectId
  productSale     ProductSale[]
  productPurchase ProductPurchase[]
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Sale {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  totalPrice  Float
  company     Company       @relation(fields: [companyId], references: [id])
  companyId   String        @db.ObjectId
  customer    Customer      @relation(fields: [customerId], references: [id])
  customerId  String        @db.ObjectId
  productSale ProductSale[]
  status      Status        @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Purchase {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String?
  totalPrice      Float
  company         Company           @relation(fields: [companyId], references: [id])
  companyId       String            @db.ObjectId
  supplier        Supplier          @relation(fields: [supplierId], references: [id])
  supplierId      String            @db.ObjectId
  productPurchase ProductPurchase[]
  status          Status            @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model ProductSale {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  sale      Sale    @relation(fields: [saleId], references: [id])
  saleId    String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  quantity  Int
  price     Float
}

model ProductPurchase {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
  purchaseId String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id])
  productId  String   @db.ObjectId
  quantity   Int
  price      Float
}

model Country {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  phone_code       String
  currency         String
  currency_name    String
  currency_symbol  String
  translations     Json
  flag             Json
  postalCodeFormat String
  postalCodeRegex  String
  timezones        Json[]
  states           Json[]
}

model Timezone {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  value  String
  abbr   String
  offset Int
  isdst  Boolean
  text   String
  utc    Json[]
}

model ResetPasswordTokens {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  token          String   @unique
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @db.ObjectId
  isUsed         Boolean  @default(false)
  expireDatetime DateTime
}
